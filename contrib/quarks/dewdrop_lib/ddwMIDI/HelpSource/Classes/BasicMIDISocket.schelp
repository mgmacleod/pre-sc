TITLE:: BasicMIDISocket
summary:: Generic note-on/off responder
categories:: External Control>MIDI
related:: Classes/AbstractMIDISocket, Guides/ddwMIDI_Guide

DESCRIPTION::
BasicMIDISocket installs a pair of functions to respond to note-on and -off messages. The functions receive the note number and velocity as arguments.

Channel information is not passed in, on the assumption that you're filtering the messages by device and channel according to the specification given in link::Guides/ddwMIDI_Guide#Identifying MIDI channels::. If you need a function to respond to incoming note messages from multiple devices or channels, and the function needs to be aware of the message's source, use link::Classes/MIDIFunc:: or link::Classes/MIDIdef:: instead.


CLASSMETHODS::
METHOD:: new

Create a new instance. Arguments are:

Definitionlist::
## chan || The messages' source. See link::Guides/ddwMIDI_Guide#Identifying MIDI channels::.
## onfunc || The function to handle note-on messages. The function's arguments should be code::|note_num, velocity|::.
## offfunc || The function to handle note-off messages. Same arguments as teletype::onfunc::.
::

Note that the argument names shown by SCIde's method completion pop-up are different. This is because teletype::*new:: is inherited from AbstractMIDISocket, which provides a generic argument template.


returns:: A BasicMIDISocket instance.


INSTANCEMETHODS::

METHOD:: onPlayer
returns:: The note-on function.

METHOD:: offPlayer
returns:: The note-off function.


METHOD:: noteOn
This method is called in response to note-on messages. In normal use, you do not need to call this method. You may call it directly for testing or debugging.

ARGUMENT:: note
The MIDI note number (0-127).

ARGUMENT:: vel
Velocity (0-127).

METHOD:: noteOff
This method is called in response to note-off messages. In normal use, you do not need to call this method. You may call it directly for testing or debugging.

ARGUMENT:: note
The MIDI note number (0-127).

ARGUMENT:: vel
Velocity (0-127).


COPYMETHOD:: AbstractMIDISocket -free
COPYMETHOD:: AbstractMIDISocket -parent
COPYMETHOD:: AbstractMIDISocket -enable
COPYMETHOD:: AbstractMIDISocket -disable
COPYMETHOD:: AbstractMIDISocket -clear

METHOD:: active
returns:: Boolean: code::true:: if the socket's destination exists and is active; code::false:: otherwise.


PRIVATE:: init

EXAMPLES::

code::
k = BasicMIDISocket(
	[\all, \omni],
	{ |note, vel| [note, vel].debug("Note on") },
	{ |note, vel| [note, vel].debug("\tNote off") }
);

// play

k.free;
::