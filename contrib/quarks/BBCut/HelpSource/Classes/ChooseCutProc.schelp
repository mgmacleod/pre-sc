class:: ChooseCutProc
summary:: Automatic breakbeat cutting algorithm
categories:: Libraries>BBCut
related:: Overviews/BBCut

description::

This cut procedure allows the user to specify a set of allowable cuts and repeats. It allows a roll at the end of a phrase. It is therefore a cross between BBCutProc11 (which automates what size cuts are permissible for a given subdiv rate) and WarpCutProc1.  Derive new classes from this overriding the default instance methods to create advanced extensions of this paradigm; else pass in your own functions.

For additional data on the algorithm see

Nick Collins, "Further Automatic BreakBeat Cutting Methods",

Proceedings of Generative Art 2001

reproduced at http://www.cus.cam.ac.uk/~nc272/

classmethods::

method:: new
Create a ChooseCutProc object with the given parameters.

argument:: cutsizefunc
A function (or something else responding to value) returning the next primitive cut size.  
The function will be passed the beat position within the current phrase, and the current phrase length to
assist judgement. The main code will automatically reduce cut sizes/ num repeats where necessary to fit
the next block into a phrase.
argument:: repeatfunc
an object responding to the value message with the number of desired total repetitions of
the cutsize just chosen. A block is of length cutsize*repeats. The just chosen cutsize, beat position and current
phrase length are passed as arguments to value.
argument:: rollfunc
A function returning an array of cuts that are a roll. The blocksize to subdivide is passed as the
argument to value.
argument:: phraselength
Next length of phrase in beats.
argument:: rollchance
A probability of a roll near the end of a phrase.
argument:: rollallowed
number of beats within sight of the end of the current phrase within which a roll is permissible.
(these two parameters are like stutterchance and stutterarea in BBCutProc11, but since the rollfunc works 
out any general cut sequence for a roll, there is no stutterspeed)
argument:: bpsd
beats per sub division. Sets a primitive cut size resolution for choose offset messages. 

instancemethods::

method:: initChooseCutProc
Called internally after a new.

method:: chooseblock
no need to override this central cut procedure in derived classes if you can just  
override the default methods cutsizedefault, repeatfuncdefault, rollfuncdefault.

examples::

code::

//you must have run this line before any of the examples below
f= BBCutBuffer(Platform.resourceDir +/+ "sounds/break.aiff",8); 


//default cutups at 144bpm
BBCut2(CutBuf1(f),ChooseCutProc.new).play(2.4);


(   //choosecutproc- own functions
var owncutfunc,ownrepfunc,ownrollfunc;

owncutfunc=
{
arg pos,currlength; //prop is phrasepos/currphraselength
var prop;
prop=pos/currlength;

[0.5,1.5,2.5].wchoose([0.1+(0.6*prop),0.2+0.6*(1-prop),0.1])
};

ownrepfunc=
{
arg cutsize,pos,currlength;
[1,2,3,5].wchoose([0.3,0.4,0.2,0.1])
};

ownrollfunc=
{
arg blocksize;

blocksize*[0.24,0.53,0.23]  //[0.02,0.05,0.15,0.18,0.2,0.4]
};


BBCut2(CutBuf1(f),ChooseCutProc(owncutfunc,ownrepfunc,ownrollfunc,8.0,0.5,3.0,0.25)).play(2);
)





(   //choose available cuts from a ui!
var sf;
var w,slider;
var owncutfunc,ownrepfunc;
    
w = SCWindow("panel", Rect.new(128, 64, 186, 90));
slider=DDSlider( w, Rect.new(32, 28, 128, 40), "which cut set", 0, 1, 'linear', 1, 0);

w.front;

owncutfunc=
{
arg pos,currlength; //prop is phrasepos/currphraselength
if((slider.value.round(1.0).asInteger) <1,
{[0.5,1.5].choose}
,
{[0.25,0.75,1.25].choose}
)
};

ownrepfunc=
{
arg cutsize,pos,currlength;
[1,2].wchoose([0.3,0.7])
};

BBCut2(CutBuf1(f),ChooseCutProc(owncutfunc,ownrepfunc,nil,8.0,0.5,3.0,0.25)).play(2);
)

::