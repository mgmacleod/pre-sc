class:: MotifCutProc
summary:: Automatic breakbeat cutting algorithm with a hierarchical structure
categories:: Libraries>BBCut
related:: Overviews/BBCut

description::

This cut procedure provides an intermediate level of hierachy between a phrase and a block. A motif is 
a short rhythmic cell, represented by nested arrays. A block is taken an array of cuts, for example:

code::
[ 1.0, 1.0, 1.0 ]
::

being three repeats of 1.0 beats. A motif is an array of blocks:

code::
[ [ 1.0, 1.0, 1.0 ], [ 2.0, 1.5 ] ]
::

This Motif then lasts 6.5 beats in total. 

The MotifCutProc is passed an array of Motifs, so a twice nested array. An indexing function is also passed
as the second argument, for selecting the next Motif. If the Motifs don't fit within a phrase, the last rhythmic 
value is shortened to fit. 

For additional data on the algorithm and its use under interactive evolution see

Nick Collins, "Interactive Evolution of Breakbeat Cut Sequences",

Proceedings of Cybersonica 2002 

reproduced at http://www.cus.cam.ac.uk/~nc272/

classmethods::

method:: new
Create a MotifCutProc object with the given parameters.

method:: stringtomotif

Converts a string in a particular form into a Motif. Used for 
entering Motifs in a StringDialog in live coding. The class method returns a Motif.
The form uses integers and the the letter 'r' for repeats, and ignores all else. For example

code::
3r4 = [ 3, 3, 3,3 ]
2r24r1 = [ [ 2, 2 ],  [ 1, 1, 1, 1 ] ]
::

It would then be converted into beats, by a multiplier like 0.5, 0.25. 

This method is unnecessary since you can go "[1.5]".interpret...

instancemethods::

method:: initBBCutProc11

Called internally after a new.

examples::

code::

(
//you must have run this code before any of the examples below
f= BBCutBuffer(Platform.resourceDir +/+ "sounds/break.aiff",8); 

TempoClock.default.tempo_(2.4);
)

(   //default index function (free random choice)

BBCut2(CutBuf2(f),MotifCutProc.new(
[           //array of Motifs
[[1.0,1.0,1.0], [0.25, 0.25, 0.5]], //first Motif   
[[0.5, 0.5], [0.33, 0.33, 0.34]]    //second Motif
]
)).play;

)


(   //changing the motiflist gradually as you go
var motiflist;

motiflist=[[[0.5,0.5],[0.25,0.25],[0.5]]]; 

BBCut2(CutBuf2(f),MotifCutProc.new(
motiflist, 0,
{       //phraselength function called once a phrase, change motiflist then
    
    motiflist.do({  
        arg motif,i; 
        
        motif.do({  
            arg block,j;
            
            block.do({arg cutsize,k; 
                
                cutsize= if(cutsize>0.125, 
                {cutsize*([0.5,1,2].wchoose([0.25, 0.5, 0.25]))},
                {cutsize*(2**(3.rand));});
                
                motiflist.at(i).at(j).put(k, cutsize);
            });
        });
        
    });
    
    8.0
}
)).play;
)


//live coding changing of motifs

(   
m=[[[0.5,0.5],[0.25,0.25],[0.5]]]; 

BBCut2(CutBuf2(f),MotifCutProc.new(m, {m.size.rand},8.0)).play;
)

//changing the motiflist as you go
m.put(0,[[0.25,0.25],[1.0],[0.5]]);

m.add([[1.0,0.5],[0.5,1.0]]);

m.add([[0.33,0.33,0.34,0.34,0.33,0.11,0.11,0.11]]);
::