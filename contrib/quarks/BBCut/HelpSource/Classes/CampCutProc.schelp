class:: CampCutProc
summary:: Automatic breakbeat cutting algorithm inspired by change ringing
categories:: Libraries>BBCut
related:: Overviews/BBCut

description::

After a challenge by Robert Godman, this class implements cutting based on change ringing, that is,
campanology. The paradigm is that of swapping offset positions. So the procedure works in small phrases,
splitting that phrase into a number of blocks equal to the number of bells. Each bell has a proscribed
offset position, so as they are permuted, the sequence of offsets change. Because the permutation
sequences of bells can take a long time before repetition (whether or not they exhaust the permutation
space) the CampCutProc is ideal for providing a constantly changing background of great variety
from a small source.

   The auxilliary class is CampStream, used for setting up the permutation data. There is little possibility
to change data once running. The format for change ringing permtations is as follows:
A permutation sequence is represented in change ringing texts by which elements are unpermuted.
Let us work out the data for the Gainsborough Little Bob Major.

code::
Gainsborough Little Bob Major
x.18.x.18.x.16.x.18.x.18.x.12
::

The x stands for 'change all'. Permutations are always of adjacent pairs. It is this limited permutation
movement that gives the slow undulating changes that characterise change ringing. Like the librarian's
dilemma problem, the sequence of involutions can take a while to acheive large shifts, but it gets there in the
end. 

We need to be more specific- we must write down what does change. However, since we know that a given 
element to be swapped must swap with it's adjacent element, we only need list the leftmost of each pair to swap.

code::
permutation chain representation
array indexing, elements are 0 to 7
a=(01)(23)(45)(67), b=(23)(45)(67) c=(12)(34)(67) d=(23)(45)(67)
ababacababad

rep as list of first of involution pairs
a=[0,2,4,6]
b=[1,3,5]
c=[1,3,6]
d=[2,4,6]
::

Then a above was the x in the change ringing notation. The CampStream takes as it's arguments 
permdata, method and bells. For the above example the permdata is the array [a, b, c, d] containing all
the necessary permutations to specify the recipe for the Gainsborough LBM. The method is the 
sequence of use of these tokens, indexing the permdata array, as a stream, so 

code::
Pseq([0,1,0,1,0,2,0,1,0,1,0,3],inf).asStream
::

The number of bells is 8 for this composition. Camp Stream allows you (with some effort to rewrite the 
permutation sequence), to use any change ringing composition. Further, you can easily invent your own 
methods (without worrying about the rigour of covering all of a permutation space).

For additional data on the algorithm see

Nick Collins, "Further Automatic BreakBeat Cutting Methods",

Proceedings of Generative Art 2001

reproduced at http://www.cus.cam.ac.uk/~nc272/

classmethods::

method:: new
Create a CampCutProc object with the given parameters.

argument:: campstream
A CampStream object to represent the permutation sequence for this change ringing.
argument:: phraselength
when value is called on it, next length of phrase in beats.

instancemethods::

method:: initCampCutProc
Called internally after a new.

method:: chooseblock
this uses the setoffset method of BBCutSynth to specify offset jumps relative to the
current phrase size. In normal use phrasesize will be the same as the beat length of the source you wish 
to permute. Note that sources which don't respond to setoffset will not be effected by CampCutProc except
for any enveloping/panning etc caused by blocks. 

examples::

code::

(   //test with gentle subtle changes...
var f;
var pdata,method,campstream;

Routine.run({
f= BBCutBuffer("sounds/a11wlk01.wav",4);

s.sync;

//Gainsborough Little Bob Major
pdata=[[0,2,4,6],
[1,3,5],
[1,3,6],
[2,4,6],
Array.new(0)
];

//add dummy initial so starts with unpermuted peel
method= Pseq([Pseq([4],1),Pseq([0,1,0,1,0,2,0,1,0,1,0,3],inf)],1).asStream;

campstream= CampStream.new(pdata,method,8);

BBCut2(CutBuf1(f),CampCutProc.new(campstream,4.0)).play(1.5);

});
)

(   //a different change ringing composition
var f;
var pdata,method,campstream;

Routine.run({
f= BBCutBuffer(Platform.resourceDir +/+ "sounds/break.aiff",8);

s.sync;

//Ashtead Surprise Major
//x.58.x.56.x.56.x.36.x.34.x.38.x.34.x.78.x.34.x.38.x.34.x.36.x.56.x.56.x.58.x.12(8)

pdata=[[0,2,4,6],[0,2,5],[0,2,6],[0,3,6],[0,4,6],[0,3,5],[0,2,4],[2,4,6],Array.new(0)];
method= Pseq([Pseq([8],1),Pseq([0,1,0,2,0,2,0,3,0,4,0,5,0,4,0,6,0,4,0,5,0,4,0,3,0,2,0,2,0,1,0,7],inf)],1).asStream;
campstream= CampStream.new(pdata,method,8);

BBCut2(CutBuf2(f),CampCutProc.new(campstream,8.0)).play(2.2);

});

)


(   //making up a random method, cuts across varying phrase lengths each phrase.
var f;
var pdata,method,campstream;

Routine.run({
f= BBCutBuffer("sounds/a11wlk01.wav",4);

s.sync;

//Ashtead Surprise Major as source material for allowable permutations
//x.58.x.56.x.56.x.36.x.34.x.38.x.34.x.78.x.34.x.38.x.34.x.36.x.56.x.56.x.58.x.12(8)

pdata=[[0,2,4,6],[0,2,5],[0,2,6],[0,3,6],[0,4,6],[0,3,5],[0,2,4],[2,4,6],Array.new(0)];

//choose random indices
method= Pseq([Pseq([8],1),Prand([0,1,2,3,4,5,6,7],inf)],1).asStream;

campstream= CampStream.new(pdata,method,8);

BBCut2(CutBuf1(f),CampCutProc.new(campstream,{[0.5,1.0,2.0].choose})).play(2.2);
});

)

::