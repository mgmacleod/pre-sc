class:: ChooseBlockProc
summary:: Automatic breakbeat cutting algorithm with a user-specified block size
categories:: Libraries>BBCut
related:: Overviews/BBCut

description::

This cut procedure allows the user to specify the block size, and how many subdivisions to
cut it into. WarpCutProc1 used this paradigm, and this class is a simplification of that class.
The class was introduce in the BBCut Library paper, which used it to explain adding a new
cut procedure to the library. 

For additional data on the algorithm see

Nick Collins, "The BBCut Library",

Proceedings of ICMC 2002

reproduced at http://www.cus.cam.ac.uk/~nc272/

classmethods::

method:: new
Create a ChooseBlockProc object with the given parameters.

argument:: blocksizefunc
A function (or something else responding to value) returning the next block length.  
The function will be passed the beats left within the current phrase, and the current phrase length to
assist judgement. The main code will automatically reduce block lengths where necessary to fit
the next block into a phrase.
argument:: numcutfunc
an object responding to the value message with the number of desired subdivisions of 
the new block. Each cut is of even length. The blocklength is passed in.
argument:: phraselength
Next length of phrase in beats.
argument:: bpsd
beats per sub division. Sets a primitive cut size resolution for choose offset messages. 

instancemethods::

method:: initChooseBlockProc
Called internally after a new.

examples::

code::

(   //defaults
var sf;

Routine.run({
sf= BBCutBuffer("sounds/a11wlk01.wav",4);

s.sync;

BBCut2(CutBuf2(sf),ChooseBlockProc.new).play(2.4);
});

)


(   //tightening over a phrase- showing arguments passd by procedure to user provided functions
var sf, blocksize, tightenchance,prop,fx, tempo, delay;
var fxgroup;

fxgroup=Group.tail(Node.basicNew(s,1));

Routine.run({
sf= BBCutBuffer(Platform.resourceDir +/+ "sounds/break2.aiff",4);

s.sync;

tempo= 2.4;
delay= 1/(2.4*2);

prop=1.0;

fx= {arg prp=1.0; var in;  in= 0.5*In.ar(0,2); 

ReplaceOut.ar(0,Limiter.ar(in+(prp*CombN.ar(in, delay, delay,delay*2))))

}.play(fxgroup);

//default is add to tail of rootNode, so need to force it to appear before the fx unit
//Group.head makes a new Group at the head of the RootNode (Nil.asGroup= RootNode.new)
BBCut2(CutGroup(CutBuf2(sf, dutycycle: {1.1-prop}), Group.before(fxgroup)),ChooseBlockProc({
arg beatsleft, currphraselength; 

prop= 1.0-(beatsleft/currphraselength);

fx.set(\prp,prop);

if((tightenchance.coin) && (prop.coin) && (blocksize>0.015625), {blocksize= blocksize*0.5});

blocksize;
},{arg blocklength; 
if((blocklength>0.25) && (0.3.coin),{[2,3,5].choose},{1})
}, {prop=1.0; blocksize=2.0; tightenchance= 1.0.rand; 8.0;})).play(tempo);

});

)


//using ChooseBlockProc to roll through a sound with UI control
(
var w;
var slider, num, data;
var sf;

data=   //control spec data for ui controls
[
["blocksubdiv",1,8,\lin,1,1],               //blocksubdiv
["dutycycle", 0.2, 2.0,\lin,0.0,1.0]            //dutycycle
];

w = SCWindow("BBCutProc11 demo N.M.Collins 23/08/03", Rect.new(100, 500, 500, (30*(data.size))));

slider= Array.fill(data.size, {arg i; DDSlider.performList(\new,[w, Rect(5,30*i, 300, 30)]++ data.at(i))}); 

w.front;

Routine.run({
sf= BBCutBuffer(Platform.resourceDir +/+ "sounds/break.aiff",8);

s.sync;

//dutycycle forces some overlap of grains
BBCut2(CutBuf2(sf,0, dutycycle: slider.at(1)),
ChooseBlockProc.new(1.0, {slider.at(0).value.round(1.0).asInteger})).play(2);

});

)
::